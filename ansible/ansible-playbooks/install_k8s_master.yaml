---
- name: installing kubernetes
  hosts: k8s
  become: yes
  vars:
    first_tools:
      - git
      - curl
      - wget
      - kubelet
      - kubeadm
      - kubectl
  tasks:
  - name: installing k8s
    block:
      - name: install apt-transport-https
        apt:
          name: apt-transport-https
          state: present
          update_cache: true
      - name: add apt key
        apt_key:
          url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
          state: present
      - name: add k8s sources
        shell: echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
      - name: install tools
        apt:
          name: "{{ item }}"
          state: present
          update_cache: true
        loop: "{{ first_tools }}"
      - name: hold packages
        dpkg_selections:
          name: "{{ item }}"
          selection: hold
        loop:
          - kubelet
          - kubeadm
          - kubectl
      - name: print kubectl version
        shell: "kubectl version --client && kubeadm version"
        register: version
      - name: print version
        debug:
          var: version
      - name: turn off swap and enable kernel modules
        shell: |
          sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
          swapoff -a
          modprobe overlay
          modprobe br_netfilter
      - name: add settings to sysctl
        shell: |
          sudo tee /etc/sysctl.d/kubernetes.conf<<EOF
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
          EOF
      - name: reload sysctl
        shell: sysctl --system
    when: ansible_distribution == 'Ubuntu'

  - name: install docker
    block: 
      - name: install docker tools
        apt: 
          name: "{{ item }}"
          state: present
          update_cache: true
        loop:
          - gnupg2
          - software-properties-common
          - ca-certificates 
      - name: add apt key
        apt_key:
          url: https://download.docker.com/linux/ubuntu/gpg
          state: present
      - name: get release name
        shell: lsb_release -cs
        register: lsb_release
      - name: add apt repository
        apt_repository:
          repo: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ lsb_release.stdout }} stable'
          state: present
          update_cache: true
      - name: installing docker
        apt: 
          name: "{{ item }}"
          state: present
          update_cache: true
        loop: 
          - containerd.io
          - docker-ce
          - docker-ce-cli
      - name: create directory for docker service
        file:
          path: /etc/systemd/system/docker.service.d
          state: directory
      - name: create daemon json config file
        shell: |
          tee /etc/docker/daemon.json <<EOF
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }
          EOF
      - name: start and enable services
        shell: |
          systemctl daemon-reload
          systemctl restart docker
          systemctl enable docker
      - name: ensure loading modules
        shell: |
          modprobe overlay
          modprobe br_netfilter
      - name: setup required sysctl params
        shell: |
          tee /etc/sysctl.d/kubernetes.conf<<EOF
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
          EOF
      - name: reload sysctl
        shell: sysctl --systemi
    when: ansible_distribution == 'Ubuntu'


- name: initialize master node
  hosts: k8s-master
  become: yes
  tasks:
    - name: login to server and print that br_netfilter is loaded
      shell: lsmod | grep br_netfilter
    - name: enable kubelet
      systemd:
        name: kubelet
        enabled: yes
    - name: correct containerd
      shell: rm -fr /etc/containerd/config.toml
    - name: restart containerd
      systemd:
        name: containerd
        state: restarted
    - name: ensure containerd is started
      systemd:
        name: containerd
        state: started
    - name: initialize kubeadm
      shell: kubeadm init
      register: kubeadm_output
    - name: print kubeadm output
      debug:
        var: kubeadm_output
